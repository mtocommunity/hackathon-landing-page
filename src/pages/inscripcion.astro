---
import Layout from "../layouts/Layout.astro";
import Title from "../components/Title.astro";
import Logo from "../components/Logo.astro";
---

<Layout title="Inscripción - MTO Hackathon 2025">
  <Logo />

  <div class="my-10 text-center">
    <Title content="Inscripción" />

    <p class="mt-5 md:px-24 font-secondary font-thin text-md md:text-lg">
      Registra tu equipo para participar en la Hackathon 2025.
    </p>

    <p
      class="mt-2 md:px-24 font-secondary font-thin text-sm md:text-md text-gray-600"
    >
      Los equipos deben estar formados por 4 a 6 integrantes.
    </p>
  </div>

  <!-- Formulario -->
  <section class="section max-w-4xl mx-auto px-4 mb-20">
    <div
      class="bg-white shadow-xl rounded-2xl overflow-hidden border border-gray-100"
    >
      <!-- Header del formulario -->
      <div class="bg-gradient-to-r from-primary to-secondary p-6 text-white">
        <h2 class="text-2xl font-bold font-primary mb-2">
          Formulario de Inscripción
        </h2>
        <p class="font-secondary font-thin">
          Completa todos los campos requeridos
        </p>
      </div>

      <form id="inscriptionForm" class="p-8 space-y-8">
        <!-- Información del Equipo -->
        <div class="space-y-6">
          <div class="border-l-4 border-primary pl-4">
            <h3 class="text-xl font-bold font-primary text-gray-800 mb-2">
              Información del Equipo
            </h3>
            <p class="font-secondary text-gray-600 text-sm">
              Datos generales de tu equipo
            </p>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Nombre del equipo -->
            <div class="md:col-span-2">
              <label
                for="teamName"
                class="block text-sm font-medium text-gray-700 mb-2 font-primary"
              >
                Nombre del Equipo <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="teamName"
                name="teamName"
                maxlength="100"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary bg-gray-50 hover:bg-white"
                placeholder="Ingresa el nombre de tu equipo"
              />
              <p class="text-xs text-gray-500 mt-1 font-secondary">
                Máximo 100 caracteres
              </p>
            </div>

            <!-- Descripción del equipo -->
            <div class="md:col-span-2">
              <label
                for="teamDescription"
                class="block text-sm font-medium text-gray-700 mb-2 font-primary"
              >
                Descripción del Equipo <span class="text-red-500">*</span>
              </label>
              <textarea
                id="teamDescription"
                name="teamDescription"
                rows="4"
                maxlength="200"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary bg-gray-50 hover:bg-white resize-none"
                placeholder="Describe brevemente a tu equipo, sus fortalezas y objetivos"
              ></textarea>
              <p class="text-xs text-gray-500 mt-1 font-secondary">
                Máximo 200 caracteres
              </p>
            </div>
          </div>
        </div>

        <!-- Miembros del Equipo -->
        <div class="space-y-6">
          <div class="border-l-4 border-secondary pl-4">
            <h3 class="text-xl font-bold font-primary text-gray-800 mb-2">
              Miembros del Equipo
            </h3>
            <p class="font-secondary text-gray-600 text-sm">
              Agrega entre 4 y 6 miembros
            </p>
          </div>

          <div id="membersContainer" class="space-y-6">
            <!-- Los miembros se agregarán dinámicamente aquí -->
          </div>

          <div class="flex flex-wrap gap-3 justify-center">
            <button
              type="button"
              id="addMemberBtn"
              class="px-6 py-3 bg-gradient-to-r from-secondary to-primary text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 font-primary"
            >
              + Agregar Miembro
            </button>
            <button
              type="button"
              id="removeMemberBtn"
              class="px-6 py-3 bg-gradient-to-r from-gray-400 to-gray-500 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 font-primary"
            >
              - Remover Miembro
            </button>
          </div>

          <div class="text-center">
            <p id="memberCount" class="font-secondary text-sm text-gray-600">
              Miembros actuales: <span
                id="currentCount"
                class="font-bold text-primary">0</span
              >/6
            </p>
          </div>
        </div>

        <!-- Botón de envío -->
        <div class="pt-6 border-t border-gray-200">
          <div class="text-center">
            <button
              type="submit"
              class="px-12 py-4 bg-gradient-to-r from-primary via-secondary to-primary text-white font-bold rounded-xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 hover:scale-105 transition-all duration-300 font-primary text-lg animate-gradient bg-[length:200%_200%]"
            >
              Inscribir Equipo
            </button>
          </div>
        </div>
      </form>
    </div>

    <!-- Mensaje de estado -->
    <div
      id="statusMessage"
      class="hidden mt-6 p-4 rounded-lg text-center font-secondary"
    >
    </div>
  </section>
</Layout>

<script is:inline>
  class InscriptionForm {
    constructor() {
      this.memberCount = 0;
      this.maxMembers = 6;
      this.minMembers = 4;
      this.form = document.getElementById("inscriptionForm");
      this.membersContainer = document.getElementById("membersContainer");
      this.addMemberBtn = document.getElementById("addMemberBtn");
      this.removeMemberBtn = document.getElementById("removeMemberBtn");
      this.currentCountSpan = document.getElementById("currentCount");
      this.statusMessage = document.getElementById("statusMessage");

      this.init();
    }

    init() {
      // Agregar 4 miembros por defecto (mínimo requerido)
      for (let i = 0; i < 4; i++) {
        this.addMember();
      }

      this.addMemberBtn.addEventListener("click", () => this.addMember());
      this.removeMemberBtn.addEventListener("click", () => this.removeMember());
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));

      this.updateUI();
    }

    addMember() {
      if (this.memberCount >= this.maxMembers) return;

      this.memberCount++;
      const memberDiv = this.createMemberHTML(this.memberCount);
      this.membersContainer.appendChild(memberDiv);
      this.updateUI();
    }

    removeMember() {
      if (this.memberCount <= this.minMembers) return;

      const lastMember = this.membersContainer.lastElementChild;
      if (lastMember) {
        lastMember.remove();
        this.memberCount--;
        this.updateUI();
      }
    }

    createMemberHTML(index) {
      const div = document.createElement("div");
      div.className =
        "member-card bg-gray-50 p-6 rounded-xl border border-gray-200 hover:shadow-lg transition-all duration-300";
      div.innerHTML = `
        <div class="flex items-center justify-between mb-4">
          <h4 class="text-lg font-bold font-primary text-gray-800">Miembro ${index}</h4>
          <div class="w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
            <span class="text-white font-bold text-sm">${index}</span>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Nombres <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              name="member${index}Name" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="Nombres"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Apellidos <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              name="member${index}LastName" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="Apellidos"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              DNI <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              name="member${index}Dni" 
              required
              pattern="[0-9]{8}"
              maxlength="8"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="12345678"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Código UTP <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              name="member${index}UtpCode" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="U20231234"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Teléfono <span class="text-red-500">*</span>
            </label>
            <input 
              type="tel" 
              name="member${index}Phone" 
              required
              pattern="[0-9]{9}"
              maxlength="9"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="987654321"
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Correo Electrónico <span class="text-red-500">*</span>
            </label>
            <input 
              type="email" 
              name="member${index}Email" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="correo@ejemplo.com"
            />
          </div>
          
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1 font-primary">
              Carrera <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              name="member${index}Career" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 font-secondary text-sm"
              placeholder="Ingeniería de Sistemas"
            />
          </div>
        </div>
      `;
      return div;
    }

    updateUI() {
      this.currentCountSpan.textContent = this.memberCount;

      // Actualizar botones
      this.addMemberBtn.disabled = this.memberCount >= this.maxMembers;
      this.removeMemberBtn.disabled = this.memberCount <= this.minMembers;

      if (this.memberCount >= this.maxMembers) {
        this.addMemberBtn.classList.add("opacity-50", "cursor-not-allowed");
      } else {
        this.addMemberBtn.classList.remove("opacity-50", "cursor-not-allowed");
      }

      if (this.memberCount <= this.minMembers) {
        this.removeMemberBtn.classList.add("opacity-50", "cursor-not-allowed");
      } else {
        this.removeMemberBtn.classList.remove(
          "opacity-50",
          "cursor-not-allowed"
        );
      }
    }

    showMessage(message, type) {
      if (!type) type = "success";
      this.statusMessage.textContent = message;
      this.statusMessage.className = `mt-6 p-4 rounded-lg text-center font-secondary ${
        type === "success"
          ? "bg-green-100 text-green-800 border border-green-300"
          : "bg-red-100 text-red-800 border border-red-300"
      }`;
      this.statusMessage.classList.remove("hidden");

      // Auto-hide después de 5 segundos si no es éxitoso
      if (type !== "success")
        setTimeout(() => {
          this.statusMessage.classList.add("hidden");
        }, 5000);
    }

    async handleSubmit(e) {
      e.preventDefault();

      try {
        // Recopilar datos del formulario
        const formData = new FormData(this.form);

        // Crear objeto con la estructura requerida
        const inscriptionData = {
          team: {
            name: formData.get("teamName") || "",
            amount: this.memberCount,
            description: formData.get("teamDescription") || "",
          },
          members: [],
        };

        // Agregar miembros
        for (let i = 1; i <= this.memberCount; i++) {
          inscriptionData.members.push({
            name: formData.get(`member${i}Name`) || "",
            last_name: formData.get(`member${i}LastName`) || "",
            dni: formData.get(`member${i}Dni`) || "",
            utp_code: formData.get(`member${i}UtpCode`) || "",
            phone: formData.get(`member${i}Phone`) || "",
            email: formData.get(`member${i}Email`) || "",
            degree: formData.get(`member${i}Career`) || "",
          });
        }

        // Mostrar datos en consola para debug
        console.log(
          "Datos de inscripción:",
          JSON.stringify(inscriptionData, null, 2)
        );

        // Enviar datos al endpoint
        const response = await fetch("/api/register", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(inscriptionData),
        });

        const result = await response.json();

        if (response.ok) {
          this.showMessage(
            `¡Inscripción enviada exitosamente! Equipo "${result.teamName}" registrado.`,
            "success"
          );
          // Resetear formulario
          this.form.reset();
          this.memberCount = 0;
          this.membersContainer.innerHTML = "";
          // Volver a agregar 4 miembros por defecto
          for (let i = 0; i < 4; i++) {
            this.addMember();
          }
        } else {
          this.showMessage(
            result.error || "Error al enviar la inscripción.",
            "error"
          );
        }
      } catch (error) {
        console.error("Error al enviar inscripción:", error);
        this.showMessage(
          "Error al enviar la inscripción. Por favor, inténtalo de nuevo.",
          "error"
        );
      }
    }
  }

  // Inicializar el formulario cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    new InscriptionForm();
  });
</script>

<style>
  /* Estilos adicionales para el formulario */
  .member-card {
    background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
    transition: all 0.3s ease;
  }

  .member-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  input:focus,
  textarea:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(228, 20, 118, 0.15);
  }

  .animate-gradient {
    background-size: 200% 200%;
    animation: gradient-shift 4s ease-in-out infinite;
  }

  @keyframes gradient-shift {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }
</style>
