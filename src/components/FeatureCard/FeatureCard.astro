---
/**
 * FeatureCard Component - Refactorizado con arquitectura limpia
 * Separaci√≥n de responsabilidades: Logic, Types, Styles
 */

import type { FeatureCardProps } from './FeatureCard.types';
import { FeatureCardController } from './FeatureCard.logic';

export type { FeatureCardProps };

const {
  icon,
  title,
  description,
  delay = 0,
  variant = 'default',
  class: className = '',
  clickable = false,
  href,
  animate = true
} = Astro.props as FeatureCardProps;

// Validar contenido
FeatureCardController.validateContent(Astro.props);

// Generar clases y atributos
const cardClasses = FeatureCardController.generateClasses(Astro.props);
const animationStyle = FeatureCardController.generateAnimationStyle(delay);
const ContainerTag = FeatureCardController.getContainerTag(href);
const containerAttributes = FeatureCardController.getContainerAttributes(Astro.props);

// Procesar contenido
const processedIcon = FeatureCardController.processIcon(icon);
const truncatedDescription = FeatureCardController.truncateDescription(description);
---

<ContainerTag 
  class={cardClasses}
  style={animationStyle}
  {...containerAttributes}
>
  <div class="feature-card__icon" set:html={processedIcon}></div>
  
  <h3 class="feature-card__title">{title}</h3>
  
  <p class="feature-card__description">{truncatedDescription}</p>
</ContainerTag>

<!-- Importar estilos del componente -->
<style src="./FeatureCard.styles.css"></style>

<!-- Script para interactividad -->
<script>
  import { createFeatureCardHandler, FeatureCardAnimator } from './FeatureCard.logic';
  
  // Initialize feature card interactions
  document.addEventListener('DOMContentLoaded', () => {
    const featureCards = document.querySelectorAll('[data-component="feature-card"]');
    
    featureCards.forEach((card) => {
      if (card instanceof HTMLElement) {
        createFeatureCardHandler(card);
      }
    });
  });
  
  // Handle dynamic feature cards
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node instanceof HTMLElement) {
          const cards = node.matches('[data-component="feature-card"]') 
            ? [node] 
            : Array.from(node.querySelectorAll('[data-component="feature-card"]'));
            
          cards.forEach((card) => {
            if (card instanceof HTMLElement) {
              createFeatureCardHandler(card);
            }
          });
        }
      });
    });
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // Expose FeatureCardAnimator globally for external use
  window.FeatureCardAnimator = FeatureCardAnimator;
</script>
