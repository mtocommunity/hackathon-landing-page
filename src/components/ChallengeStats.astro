---
// ===== CHALLENGE STATS COMPONENT =====

import type { ChallengeStats } from '../types/retos';

export interface Props {
  stats: ChallengeStats;
  variant?: 'default' | 'compact' | 'featured';
  animate?: boolean;
}

const { 
  stats, 
  variant = 'default',
  animate = true 
} = Astro.props;

const statsClass = `challenge-stats challenge-stats--${variant}`;
---

<section class={statsClass} data-animate={animate}>
  <div class="stats-container">
    <div class="stats-grid">
      <!-- Total Prize -->
      <div class="stat-item stat-item--primary">
        <div class="stat__icon">
          üí∞
        </div>
        <div class="stat__content">
          <div class="stat__value" data-value={stats.totalPrize}>
            {stats.totalPrize}
          </div>
          <div class="stat__label">
            Premio Total
          </div>
        </div>
      </div>

      <!-- Categories -->
      <div class="stat-item stat-item--secondary">
        <div class="stat__icon">
          üéØ
        </div>
        <div class="stat__content">
          <div class="stat__value" data-value={stats.categories}>
            {stats.categories}
          </div>
          <div class="stat__label">
            Categor√≠as
          </div>
        </div>
      </div>

      <!-- Max Team Size -->
      <div class="stat-item stat-item--tertiary">
        <div class="stat__icon">
          üë•
        </div>
        <div class="stat__content">
          <div class="stat__value" data-value={stats.maxTeamSize}>
            {stats.maxTeamSize}
          </div>
          <div class="stat__label">
            M√°x. por Equipo
          </div>
        </div>
      </div>

      <!-- Duration -->
      <div class="stat-item stat-item--quaternary">
        <div class="stat__icon">
          ‚è±Ô∏è
        </div>
        <div class="stat__content">
          <div class="stat__value" data-value={stats.duration}>
            {stats.duration}
          </div>
          <div class="stat__label">
            Duraci√≥n
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Base Stats Styles */
  .challenge-stats {
    padding: var(--spacing-12) 0;
  }

  .stats-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-4);
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--spacing-8);
  }

  /* Stat Item Base */
  .stat-item {
    background: var(--bg-neumorphic);
    border-radius: var(--radius-neumorphic);
    padding: var(--spacing-8);
    box-shadow: var(--shadow-neumorphism-card);
    transition: all var(--transition-normal);
    position: relative;
    border: 1px solid rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    gap: var(--spacing-6);
    animation: fadeInUp 0.6s ease-out both;
    overflow: hidden;
  }

  .stat-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    border-radius: var(--radius-neumorphic) var(--radius-neumorphic) 0 0;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .stat-item:hover::before {
    opacity: 1;
  }

  .stat-item:hover {
    transform: translateY(-6px);
    box-shadow: var(--hover-elevation);
  }

  /* Stat Item Variants */
  .stat-item--primary::before {
    background: linear-gradient(135deg, #10b981, #059669);
  }

  .stat-item--primary:hover {
    box-shadow: var(--hover-elevation), 0 0 30px rgba(16, 185, 129, 0.3);
  }

  .stat-item--secondary::before {
    background: var(--gradient-button);
  }

  .stat-item--secondary:hover {
    box-shadow: var(--hover-elevation), var(--glow-blue);
  }

  .stat-item--tertiary::before {
    background: linear-gradient(135deg, #8b5cf6, #7c3aed);
  }

  .stat-item--tertiary:hover {
    box-shadow: var(--hover-elevation), var(--glow-purple);
  }

  .stat-item--quaternary::before {
    background: linear-gradient(135deg, #ec4899, #db2777);
  }

  .stat-item--quaternary:hover {
    box-shadow: var(--hover-elevation), var(--glow-pink);
  }

  /* Stat Icon */
  .stat__icon {
    width: 80px;
    height: 80px;
    font-size: 2.5rem;
    background: var(--gradient-surface);
    border-radius: var(--radius-neumorphic);
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow-neumorphism);
    flex-shrink: 0;
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
  }

  .stat__icon::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--gradient-button);
    opacity: 0;
    transition: opacity var(--transition-normal);
    border-radius: var(--radius-full);
  }

  .stat-item:hover .stat__icon::before {
    opacity: 0.1;
  }

  .stat-item:hover .stat__icon {
    transform: scale(1.1) rotate(10deg);
    box-shadow: var(--shadow-neumorphism), var(--glow-blue);
  }

  /* Stat Content */
  .stat__content {
    flex: 1;
  }

  .stat__value {
    font-size: clamp(1.875rem, 4vw, 3rem);
    font-weight: var(--font-weight-black);
    color: var(--text-primary);
    margin-bottom: var(--spacing-2);
    line-height: 1.2;
    background: var(--gradient-hero);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stat__label {
    color: var(--text-secondary);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Variant Styles */
  .challenge-stats--compact .stats-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-4);
  }

  .challenge-stats--compact .stat-item {
    padding: var(--spacing-6);
    flex-direction: column;
    text-align: center;
    gap: var(--spacing-4);
  }

  .challenge-stats--compact .stat__icon {
    width: 60px;
    height: 60px;
    font-size: 1.75rem;
  }

  .challenge-stats--compact .stat__value {
    font-size: var(--font-size-2xl);
  }

  .challenge-stats--compact .stat__label {
    font-size: var(--font-size-sm);
  }

  .challenge-stats--featured {
    background: var(--gradient-primary);
    border-radius: var(--radius-2xl);
    padding: var(--spacing-12);
    margin: var(--spacing-8) 0;
  }

  .challenge-stats--featured .stat-item {
    background: var(--surface-bg);
    border: 2px solid rgba(255, 255, 255, 0.9);
  }

  .challenge-stats--featured .stat-item:hover {
    border-color: var(--accent-blue);
  }

  /* Animation delays */
  .stat-item:nth-child(1) { animation-delay: 0s; }
  .stat-item:nth-child(2) { animation-delay: 0.2s; }
  .stat-item:nth-child(3) { animation-delay: 0.4s; }
  .stat-item:nth-child(4) { animation-delay: 0.6s; }

  /* Responsive Design */
  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: var(--spacing-6);
    }

    .stat-item {
      padding: var(--spacing-6);
      flex-direction: column;
      text-align: center;
      gap: var(--spacing-4);
      overflow: hidden;
    }

    .stat__icon {
      width: 70px;
      height: 70px;
      font-size: 2rem;
    }

    .stat__value {
      font-size: var(--font-size-3xl);
    }
  }

  @media (max-width: 480px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--spacing-4);
    }

    .stat-item {
      padding: var(--spacing-4);
      overflow: hidden;
    }

    .stat__icon {
      width: 60px;
      height: 60px;
      font-size: 1.75rem;
    }

    .stat__value {
      font-size: var(--font-size-2xl);
    }

    .stat__label {
      font-size: var(--font-size-xs);
    }
  }

  /* Focus states */
  .stat-item:focus-within {
    outline: 2px solid var(--accent-blue);
    outline-offset: 2px;
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .stat-item {
      animation: none;
    }
    
    .stat__icon,
    .stat-item {
      transition: none;
    }
  }

  /* Print styles */
  @media print {
    .challenge-stats {
      break-inside: avoid;
    }
    
    .stat-item {
      box-shadow: none;
      border: 1px solid #ddd;
    }
  }
</style>

<!-- Animation Script -->
<script>
  // Intersection Observer for stat value animation
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '50px'
  };

  const animateValue = (element: HTMLElement, targetValue: string) => {
    const isNumber = /^\d+$/.test(targetValue);
    
    if (isNumber) {
      const target = parseInt(targetValue);
      const duration = 2000;
      const stepTime = 50;
      const steps = duration / stepTime;
      const increment = target / steps;
      let current = 0;
      
      const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        element.textContent = Math.floor(current).toString();
      }, stepTime);
    }
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const statValue = entry.target.querySelector('.stat__value') as HTMLElement;
        const targetValue = statValue?.dataset.value;
        
        if (statValue && targetValue) {
          animateValue(statValue, targetValue);
        }
        
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all stat items
  document.addEventListener('DOMContentLoaded', () => {
    const statItems = document.querySelectorAll('.stat-item');
    statItems.forEach((item) => observer.observe(item));
  });
</script>
